[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Lectures on ML Systems",
    "section": "",
    "text": "This page serves as a reference for understanding Machine Learning Systems (ML Systems). The material consists of video lectures, slides, and additional reading material.\n\nDescription\nMachine learning models are pervasively used to solve problems in varied fields such as vision, robotics, NLP, and scientific discovery. The increased capabilities of these models has corresponded with increase in their size and compute requirements. Besides, use of these models in real-world applications demands strict requirements on performance parameters, such as latency, throughput, and hardware usage efficiency.\nThe focus of this course is on exploring these systems-related challenges during training and serving of large language models (LLMs) with special emphasis on Transformer architecture. Topics include GPU architecture and hardware-aware algorithms, ML frameworks and compilers, techniques to parallelize LLMs over multiple GPUs, and reduction of computational complexity and memory footprint.\nTextbook: The following book can be helpful for parts of the course:\nHow to Scale Your Model by Austin, J., Douglas, S., Frostig, R., Levskaya, A., Chen, C., Vikram, S., Lebron, F., Choy, P., Ramasesh, V., Webson, A., & Pope, R. (2025).\nCredits: Part of the content in the lectures is based on material from csci 1390 at Brown, created by Deepti Raghavan, and cs 15-442 at CMU, by Tianqi Chen.\nDisclaimer: This being the first offering of this class, please anticipate technical difficulties. This is not an official course webpage from Plaksha University; this is maintained personally by instructor.\nFeedback: If you have found the material useful, or have suggestions on how it can be improved, I will be happy to hear from you. Please email me at pankaj.pansari@plaksha.edu.in\n\n\n\nLectures\nLecture 1: Introduction\nSlides, Video lecture\nSuggested Reading:\n\nGholami, Amir, et al. “AI and Memory Wall.” IEEE Micro Journal (arxiv link)\n\n\nThis very readable paper presents the interplay between throughput, bandwidth, and end-to-end runtime via a case study on Transformer models.\n\n\nKaplan, Jared, et al. “Scaling laws for neural language models.” arXiv:2001.08361 (2020) (arxiv link)\n\n\nAn empirical study quantifying the improvement in LLM performance with model size, training dataset size, and amount of compute. Also known as Kaplan’s scaling law.\n\n\nJacob, Austin, et al. How to Scale Your Model (Part 0: Intro)\n\n\nA useful summary of why study of ML Systems is important.\n\nLecture 2: Automatic Differentiation\nSlides, Video lecture\nSuggested Reading:\n\nKevin Clark, “Computing Neural Network Gradients” (link)\n\n\nA concise refresher on analytical gradient computation for neural networks in terms of matrices and vectors.\n\n\nRoger Grosse, “CSC321 Lecture 10: Automatic Differentiation” (Slides)\n\n\nA presentation of automatic differentiation in the context of the Autograd library. It’s nice to see how Autograd builds computation graph in a different manner than PyTorch or Needle.\n\n\nChen, Tianqi, et al. “Training Deep Nets with Sublinear Memory Cost” (arxiv link)\n\n\nSeminal paper that introduced the idea of gradient checkpointing.\n\nPractical 1: Automatic Differentiation Implementation\nVideo\nWe do a code walkthrough on how reverse-mode automatic differentiation is implemented in a modern ML framework. We choose Needle, an educational framework with a similar interface as PyTorch, developed at CMU.\nLecture 3: Understanding GPU Bottlenecks for ML\nSlides, Video lecture\nSuggested Reading:\n\nStephen Jones, “How GPU Computing Works”, GTC 2021 (Video)\n\n\nExcellent introduction to principles behind GPU design and CUDA architecture. Specially good is the discussion of co-design of GPU hardware and CUDA.\n\n\nNvidia Docs, “GPU Performance Background User’s Guide” (Link)\n\n\nA useful discussion of how different deep learning operations get limited by either compute or memory of GPU.\n\n\nHorace He, “Making Deep Learning Go Brrrr From First Principles” (Blog post)\n\n\nNice diagrams and figures to compactly illustrate the 3 components where our ML program spends time - compute, memory, and overhead."
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site"
  }
]